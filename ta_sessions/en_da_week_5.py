# -*- coding: utf-8 -*-
"""EN_DA_Week_5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BtCJXGLqN_NJ-3qoav96A4pnhWAWXLDi

# Week 5

## Variables
Python has no command for declaring a variable.

A variable is created the moment you first assign a value to it.
"""

x = 4       # x is of type int
y = "Sally" # x is now of type str
print(x)
print(y)

"""Algo 1: Add two numbers

"""

x = 5
y = 7
z = x + y
print(z)

z
z - 1

print(x+y)

"""## Data Types and Casting

Text Type:	`str` \\
Numeric Types:	`int`, `float`, `complex` \\
Boolean Type:	`bool` \\
Sequence Types:	`list`, `tuple`, `range` \\
Mapping Type:	`dict`
"""

x = str(3)    
y = int(3)    
z = float(3)  
a = True
print (x)
print (y)
print (z)
print(a)
print(type(x))
print(type(y))
print(type(z))
print(type(a))

x = 3.0

print(type(x))

"""### Strings

A string, `str`,  is a series of characters. In Python, anything inside quotes is a string. And you can use either single or double quotes. 

'hello' is the same as "hello".

You can print the `str` using the `print()` function:
"""

print("Hello")
a = 'Hello'
print(a)
b = """Lorem ipsum dolor sit amet,
consectetur adipiscing elit,
sed do eiusmod tempor incididunt
ut labore et dolore magna aliqua."""
print(b)

# when would you use more than 1 quote ?
# """ triple """

"""Concatenate strings"""

a = "Hello"
b = "World"
c = a + '\n' + b
print(c)

"""User Input"""

print('Enter your name:')
x = input()
print('Hello, ' + x)

# Accessing one particular index
s = 'Hello World'

# slicing
s1 = s[:2]
print(f's1: {s1}')

s2 = s[2:-2]
print(f's2: {s2}')

# immutability
s[2] = 'a'

# how would you 'change' one letter

a = "Hello, World!"
print(a.replace("H", "J"))

"""##Conditional Statements
Logical conditions: \\

Equals (est égal à): a == b \\
Not Equals (n'est pas égal à): a != b \\
Less than (est moins que): a < b \\
Less than or equal to: a <= b \\
Greater than (est plus grand que): a > b \\
Greater than or equal to: a >= b \\

We use the instruction `if`.




"""

x = 5

x != 4

a = 33
b = 200
if b < a:
  print("b is greater than a")
  print('abc')

b < a

"""`elif`: if the previous condition is false, try this"""

a = 200
b = 33
if b > a:
  print("b is greater than a")
elif a == b:
  print("a and b are equal")
else:
  print("a is greater than b")

"""### Logical operators `or` and `and`"""

a = 200
b = 33
c = 500
if a < b or a < c:
  print("At least one of the conditions is True")

if a>b and b<c:
    print("both conditions are true")

if a > 100:
    print("A")
if b > 10:
    print("B")
    a = 0
else: 
    print("Z")

if a > 100:
    print("A")
elif b > 10:
    print("B")
    a = 0
else: 
    print("Z")

"""Greatest of three"""

a = int(input("Enter a? "));  
b = int(input("Enter b? "));  
c = int(input("Enter c? "));  
if a>b and a>c:  
    print("a is largest");  
if b>a and b>c:  
    print("b is largest");  
if c>a and c>b:  
    print("c is largest");

"""##Import

In Python, you use the import keyword to make code in one module available in another. Imports in Python are important for structuring your code effectively. Using imports properly will make you more productive, allowing you to reuse code while keeping your projects maintainable
"""

import random
roll = random.randint(1,100)
print ("Number rolled is" + ' ' + str(roll) )

"""## List

Lists are used to store multiple items in a single variable.

**Lists** are one of 4 built-in data types in Python used to store collections of data, the other 3 are **Tuple**, **Set**, and **Dictionary**, all with different qualities and usage.

Lists are created using square brackets:
"""

thislist = ["apple", "banana", "cherry"]
print(thislist)
print(len(thislist)) # len = length - taille

mylist = ["apple", "banana", "cherry", 3, True]
print(mylist)

## indexing
print(mylist[1])

## modifying
mylist[0] = 'Apple'

print(mylist)

## adding
mylist.append('orange')

print(mylist)

## removing
mylist.remove('orange')
print(mylist)

mylist.pop()

print(mylist)

## removing at an index
mylist.pop(0)

print(mylist)

"""## Tuple A tuple is a collection which is ordered and unchangeable.

Tuples are written with round brackets.
"""

mytuple = (5,1,4)

for i in mytuple:
    print(i)

mytuple[0] = 3

mytuple.append(1)

"""While tuples are immutable, we still can concatenate and slice them"""

a = (1, 2, 3)
b = a + (4, 5, 6)  # (1, 2, 3, 4, 5, 6)
c = b[1:]  # (2, 3, 4, 5, 6)

print(f'a: {a}')
print(f'b: {b}')
print(f'c: {c}')

"""## Loops

### While loop
With the `while` loop we can execute a set of statements as long as a condition is true. \\
"""

i = 1
while i < 6:
  print(i)
  i = i + 1

"""With the `break` statement we can stop the loop even if the while condition is true:"""

i = 1
while i < 6:
  print(i)
  if i == 3:
    break
  i += 1

"""With the `continue` statement we can stop the current iteration, and continue with the next:"""

i = 0
while i < 6:
  i += 1
  if i == 3:
    continue
  print(i)

"""### For loop
A `for` loop is used for iterating over a sequence (that is either a list, a tuple, a dictionary, a set, or a string).
"""

fruits = ["apple", "banana", "cherry"]
for x in fruits:
  print(x)

"""###Range ()
To loop through a set of code a specified number of times, we can use the `range()` function. 


The `range()` function returns a sequence of numbers, starting from 0 by default, and increments by 1 (by default), and ends at a specified number.
"""

print(range(5))

print(list(range(5)))

print(list(range(1,5)))

# 1; 1+1 = 2; 2+1 = 3 ...

print(list(range(1,10,2)))

#1 ; 1+2 = 3; 3+2=5 ; 5+2 ...

for x in range(1,6):
  print(x)

"""## Dictionaries

Dictionaries are used to store data values in key:value pairs.

A dictionary is a collection which is ordered*, changeable and do not allow duplicates.

As of Python version 3.7, dictionaries are ordered. In Python 3.6 and earlier, dictionaries are unordered.

Dictionaries are written with curly brackets, and have keys and values.

Keys MUST be unique
"""

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
print(thisdict)

# get a value
x = thisdict["model"]
print(x)

# change a value
thisdict["year"] = 2018
print(thisdict)

# add a key
thisdict["color"] = "red"
print(thisdict)

# deleting
thisdict.pop('year')

print(thisdict)

del thisdict ['color']
# print(thisdict)

print(thisdict)

employees = {}

for i in range(3):
    name = input("Enter employee's name: ")
    salary = int(input("Enter employee's salary: "))

    employees[name] = salary
print(employees)

"""### JSON - JAVASCRIPT OBJECT NOTION

Reading JSON and installing packages with Pip \\
JSON is a syntax for storing and exchanging data. JSON is text, written with JavaScript object notation. Python has a built-in package called json, which can be used to work with JSON data.

In JSON, data is represented in key-value pairs, and curly braces hold objects, where a colon is followed after each name. The comma is used to separate key-value pairs. Square brackets are used to hold arrays, where each value is comma-separated.
"""



# import requests module
import requests
 
# Making a get request
response = requests.get('https://api.github.com')
 
# print response
print(response)
 
# print json content
print(response.json())

myresponse = response.json()

list(myresponse.keys())

"""## pip

PIP is a package manager for Python packages, or modules if you like.
A package contains all the files you need for a module.
Modules are Python code libraries you can include in your project.

Camelcase is a naming protocol for giving file or attribute names that contain more than one word joined that all start with a capital letter.
"""

pip install camelcase

import camelcase

c = camelcase.CamelCase()

txt = "hello world"

print (c.hump(txt))

pip install numpy

import numpy as np

np.array([i for i in range(5)])

"""## Function

Function is a block of code which only runs when it is called.

You can pass data, known as parameters, into a function.

A function can return data as a result.

In Python a function is defined using the `def` keyword:
"""

def my_function():
  print("Hello from a function")

#To call a function, use the function name followed by parenthesis:

def my_function():
  print("Hello from a function")

my_function()

"""From a function's perspective:

Parameter is the variable specified in the defintion of the function

Argument is the value parsed into a function when it is called
"""

def my_function(fname, lname):
  print(fname + " " + lname)

my_function("Joe", "Smith")

"""Adding numbers in a list"""

def mysum(numbers):
    # DIY
    return
print(mysum([8, 2, 3, 0, 7]))

"""Calculator"""

def add(P, Q):    
   # This function is used for adding two numbers   
   return P + Q   
def subtract(P, Q):   
   # This function is used for subtracting two numbers   
   return P - Q   
def multiply(P, Q):   
   # This function is used for multiplying two numbers   
   return P * Q   
def divide(P, Q):   
   # This function is used for dividing two numbers    
   return P / Q    
# Now we will take inputs from the user    
print ("Please select the operation.")    
print ("a. Add")    
print ("b. Subtract")    
print ("c. Multiply")    
print ("d. Divide")    
    
choice = input("Please enter choice (a/ b/ c/ d): ")    
    
num_1 = int (input ("Please enter the first number: "))    
num_2 = int (input ("Please enter the second number: "))    
    
if choice == 'a':    
   print (num_1, " + ", num_2, " = ", add(num_1, num_2))    
    
elif choice == 'b':    
   print (num_1, " - ", num_2, " = ", subtract(num_1, num_2))    
    
elif choice == 'c':    
   print (num_1, " * ", num_2, " = ", multiply(num_1, num_2))    
elif choice == 'd':    
   print (num_1, " / ", num_2, " = ", divide(num_1, num_2))    
else:    
   print ("This is an invalid input")

